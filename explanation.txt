                                    PROJECT-3 : Problems vs. Algorithm


Problem 1:-
         The main idea of this problem is to find the square root of an integer without using any python library.
         We have to find out the floor value of the square root.
         So in the program code we have function name "def sqrt(number)",and the code excute according to thses
         lines which is given below:
                                 # if number is less than 0 then our function return None
                                 # if number is 0 or 1 the function simply return the number
                                 # Now we use While loop intialize with two variables i_start,i_end
                                   then we find the i_middle_pow and compare this variable according to these
                                   condition.(1)- if i_middle_pow is equal to number then function returns the 
                                   i_middle_pow.(2)- if i_middle_pow is less than to number then i_start=i_middle+1
                                   result=i_middle.(3)- if i_middle_pow is greater than to number then
                                   i_end = i_middle-1 
                                   # we have follow this procedure until we find the result 
 
      Time Complexity and Space complexity:-
                                          The time complexity of this algorithm is O(log(n)) because here we use 
                                          binary search approach.
                                          And the space complexity of this algorithm is O(1) because it is
                                          independent of input.

Problem 2:-
         In this problem we have a sorted array which is rotated at some random pivot value.We have to find the 
         target value in the array.If we find the value then returns its index value otherwise return -1.In this
         problem we found the middle element of the array ,if middle element is the target value then we simple
         return the index of middle element, if middle element is not the target value then array is splitted into 
         two halves and after this we doing the recursive process for both of the halves untill we found our target
         value.

       Time and Space complexity:-
                                 The time complexity of this algorithm is O(log(n)) beacause here we use binary
                                 search approach.
                                 And the space complexity of this algorithm is O(1) because it is independent of 
                                 input.

Problem 3:-
         In this problem we have to rearrange Array Elements so as to form two number such that their sum is 
         maximum. Return these two numbers.Here we use divide and conquer approach we have to divide the array 
         element untill each element is seprated.Then we merge the all elements of array into a new empty array
         according to the given condtions which is given in "def merge()" function.
         We always obtain a combination that satisfies the condition of having a maximum sum of two numbers and 
         maximum a digit of difference between them.

       Time and Space complexity:-
                                The time complexity of this algorithm is O(n*log(n)) because here we use merge 
                                sort algorithm.Some other operations are also added in the program but these all
                                operation takes O(1) time.
                                And The space complexity of merge sort is O(n) with two lists created again after 
                                merging for a total of O(3n), simplified to O(n).

Problem 4:-
         In this problem we have Given an input array consisting on only 0, 1, and 2, sort the array in a single 
         traversal. You're not allowed to use any sorting function that Python provides. Here we have to focus only
         on 0 and 2 the 1 is automaticaly sorted. In this problem we use only a single loop.

       Time and Space complexity:-
                                The time complexity of this algorithm is O(n),because it uses only a single while
                                loop. 
                                And the space complexity is O(1), because we do not create an extra array, we work 
                                on a given array and also we use few variables to keep track on indexes.

Problem 5:-
         This problem is based on the Tries data structure . We have to find Finding all the suffixes in a given 
         Trie Dictionary. To generate suffixes, we first call find on the Trie class to find our prefix. Then, with
         the returned node, we can call suffixes on the TrieNode class. This is a simple wrapper to join the 
         yielded result of _generate_suffixes, which uses recursion to search all nodes in children and call 
         itself until is_word is True.
       
       Time and Space complexity:-
                                The time complexity is O(n), because we have to traversh through the whole 
                                dictionary to find suffixes.
                                And the space complexity is O(1), because we do not create any kind of new dict. or
                                object.

Problem 6:-
         In this problem, we will look for smallest and largest integer from a list of unsorted integers. The code 
         should run in O(n) time. Do not use Python's inbuilt functions to find min and max.We iterate through each
         number in a list of integers, and we set two variables, min_val and max_val, which we will update as check
         the min and max of each number.
         Here we use "-float("inf")" and "float("inf")" to find maximum and minimum value.

       Time and space complexity:-
                                The time complexity is O(n), because we use only one for loop and traversh through
                                the list for a single time.
                                And the space complexity is O(1),because we do not create new list and we intialize
                                few variables.

Problem 7:-
         In this problem  we are going to implement an HTTPRouter like you would find in a typical web server 
         using the Trie data structure we learned previously. First we need to implement a slightly different 
         Trie than the one we used for autocomplete. Instead of simple words the Trie will contain a part of the 
         http path at each node, building from the root node /. In the main Router, we initialize our routes with
         a RouteTrie, adding a "/" root route and our default not found route handler. And we simple add two
         functions add_handler and lookup for getting out our result.
       
      Time and space complexity:-
                                The time complexity is O(1), because for lookup we do not need to traversh through
                                the whole dictionary.
                                And space complexity is O(1), because we do not create any kind of new dict. or 
                                object. 
 

             
                                          
                                   
         